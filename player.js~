function Player(x,y,icon,iconColor,backgroudColor) {
    Creature.call(this,x,y,icon,"Player",10,10,iconColor,backgroudColor);
};

Player.prototype = Object.create(Creature.prototype);

Player.prototype.act = function() {
    Game._drawWholeMap();
    Game.engine.lock();
    /* wait for user input; do stuff when user hits a key */
    window.addEventListener("keydown", this);
};

Player.prototype.calculateFOV = function() {
     /* input callback */
     var lightPasses = function(x, y) {
         return Game.getMapElement(x+","+y) === "."; 
     };

      var fov = new ROT.FOV.PreciseShadowcasting(lightPasses);
    //var playerIcon = this._icon;
    var currentlySeen = {};
      /* output callback */
    fov.compute(this._x, this._y, 10, function(x, y, r, visibility) {
        Game.setHasSeenMap(x+","+y);
        currentlySeen[x+","+y] = true; 
    });
    this.currentlySeenPlaces = currentlySeen;
    return currentlySeen;
};

Player.prototype._inventory = {};
 
Player.prototype.handleEvent = function(e) {
    if(this._currentHealth <= 0) {
        console.log("olen kuollut");
        var gameOverScreen = new GameOverScreen();
        window.addEventListener("keydown",gameOverScreen);
        window.removeEventListener("keydown",this);
        gameOverScreen.drawMenu();
    }
    //console.log("handlecurrent x " + this._x);
    //console.log("handlecurrent y " + this._y);
    var dirKeyMap = {};
    dirKeyMap[38] = 0;
    dirKeyMap[33] = 1;
    dirKeyMap[39] = 2;
    dirKeyMap[34] = 3;
    dirKeyMap[40] = 4;
    dirKeyMap[35] = 5;
    dirKeyMap[37] = 6;
    dirKeyMap[36] = 7;

    var code = e.keyCode;
    /* one of numpad directions? */
    if (code == ROT.VK_SPACE) {
        var invMenu = new InventoryMenu(30,5,10,15);
        window.addEventListener("keydown",invMenu);
        window.removeEventListener("keydown",this);
        invMenu.drawMenu();
    }
    if (!(code in dirKeyMap)) { return; }

    /* is there a free space? */
    var dir = ROT.DIRS[8][dirKeyMap[code]];
    var newX = this._x + dir[0];
    var newY = this._y + dir[1];
    var newKey = newX + "," + newY;
    if (Game.getMapElement(newKey) == "#") {
        MessageWindow.addMessage("You can't go through the wall yet");
        return; 
    } else if(Game.getCreature(newKey)) {
        Game.getCreature(newKey).onHit(function(creature) {
            MessageWindow.addMessage("Player hit "+creature._name+" for 1 damage");
            creature._currentHealth -= 1;
        });
    } else {
        this._x = newX;
        this._y = newY;
        if (newKey in Game.getFeatureList()) {
            Game.getFeatureList()[newKey].stepOnEvent();
        } 
    }

    //Game.gameDraw(this._x, this._y, Game.map[this._x+","+this._y]);
    Game.removeExtraCreatures();
    Game._drawWholeMap();
    
    window.removeEventListener("keydown", this);
    Game.engine.unlock();
};

Player.prototype.movePlayer = function(x,y,newLevel) {
    this._x = x;
    this._y = y;
    console.log("current x " + this._x);
    console.log("current y " + this._y);
};

Player.prototype.onHit = function(onHitFunc) {
    MessageWindow.addMessage("Player was hit");
    onHitFunc(this);
};
